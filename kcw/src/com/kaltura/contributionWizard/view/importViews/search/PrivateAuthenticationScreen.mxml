<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:TitleWindow
  preinitialize="preinitializeHandler()"
  horizontalAlign="center" verticalAlign="middle"
  title="{resourceManager.getString(ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN, 'TITLE', 
 	[
 		resourceManager.getString(ResourceBundleNames.MEDIA_PROVIDERS, _model.mediaProviders.activeMediaProvider.providerName.toUpperCase() + '_LEAD')
 	])}"
  showCloseButton="true"
  close="closeMe()"
  paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10"
  xmlns:mx="http://www.adobe.com/2006/mxml"
  currentState="{this.stage ? activeMediaProvider.authMethodList.privateMethod.methodType : '' }"
  xmlns:providers="com.kaltura.contributionWizard.vo.providers.*" xmlns:ac="com.adobe.ac.*"
  xmlns:util="com.kaltura.contributionWizard.util.*">

  <mx:Metadata>
    [Event(name="loginSuccess", type="com.kaltura.contributionWizard.view.events.AuthenticatedSearchViewEvent")]
  </mx:Metadata>

  <mx:Script>
    <![CDATA[
      import mx.events.PropertyChangeEvent;
      import com.arc90.modular.CairngormEventDispatcherFactory;
      import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
      import mx.effects.easing.Elastic;
      import mx.effects.easing.Bounce;
      import com.kaltura.contributionWizard.view.events.AuthenticatedSearchViewEvent;
      import mx.controls.Alert;
      import mx.managers.PopUpManager;
      import com.kaltura.contributionWizard.model.ProviderLoginStatus;
      import mx.effects.easing.Quadratic;
      import com.kaltura.contributionWizard.events.LoginEvent;
      import flash.net.navigateToURL;
      import mx.binding.utils.ChangeWatcher;
      import com.kaltura.contributionWizard.vo.providers.AuthentcationMethodTypes;
      import com.kaltura.contributionWizard.vo.providers.MediaProviderVO;
      import com.kaltura.contributionWizard.model.WizardModelLocator;
      [Bindable]
      private var _model:WizardModelLocator = WizardModelLocator.getInstance();

      [Bindable]
      public var activeMediaProvider:MediaProviderVO; //binded to model and represents the active media provider

      public var loginMode:Namespace;

      [Bindable]
      private var _isDoingLogin:Boolean = false;

      private function doLogin():void
      {
        if (!_model.providerLoginStatus.isPending)
        {
          //the externallogin view state has an enterState handler that triggers the doLogin(). At this phase, the input texts might not be created yet.
          //if it's not exist, use empty string. The external login always send empty user/password to the command.
          var username:String = usernameField ? usernameField.text : "";
          var password:String = passwordField ? passwordField.text : "";
          CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent( new LoginEvent(LoginEvent.PROVIDER_LOGIN, username, password) );
        }
      }

/* 			userOnlyLogin function doLogin():void
      {
        var username:String = usernameField.text;
        CairngormEventDispatcherFactory.getDispatcher(this).getInstance().dispatchEvent( new LoginEvent(LoginEvent.PROVIDER_LOGIN, username) );
      }

      userAndPasswordLogin function doLogin():void
      {
        var username:String = usernameField.text;
        var password:String = passwordField.text;

        CairngormEventDispatcherFactory.getDispatcher(this).getInstance().dispatchEvent( new LoginEvent(LoginEvent.PROVIDER_LOGIN, username, password) );
      }

      externalLogin function doLogin():void
      {
        CairngormEventDispatcherFactory.getDispatcher(this).getInstance().dispatchEvent( new LoginEvent(LoginEvent.PROVIDER_LOGIN) );
      } */

      private function externalEnterStateHandler():void
      {
		//in order to avoid previous "login failed" error
		if (activeMediaProvider.authMethodList.privateMethod.externalAuthUrl && 
			(_model.providerLoginStatus.loginStatus == ProviderLoginStatus.LOGIN_NOT_SENT))
			return;

        doLogin();
      }

      private function loginSuccessHandler():void
      {
        dispatchLoginSuccess();
      }

      private function gotoExternalLogin():void
      {
        var externalUrl:String = activeMediaProvider.authMethodList.privateMethod.externalAuthUrl;
        if (externalUrl)
        {
          var urlRequest:URLRequest = new URLRequest();
          urlRequest.url = externalUrl;
          navigateToURL(urlRequest);
          _isDoingLogin = true;
        }
        else
        {
          Alert.show("Could not locate the login page's URL");
        }
      }

      private function dispatchLoginSuccess():void
      {
        dispatchEvent(new AuthenticatedSearchViewEvent(AuthenticatedSearchViewEvent.LOGIN_SUCCESS));
        closeMe();
      }

      private function closeMe():void
      {
        this.currentState = "";
        _isDoingLogin = false;
        clearFields();
        
        //to avoid login error on the next opening of the window
       if (_model.providerLoginStatus.loginStatus == ProviderLoginStatus.LOGIN_FAILED)
        	_model.providerLoginStatus.loginStatus = ProviderLoginStatus.LOGIN_NOT_SENT;
        PopUpManager.removePopUp(this);
      }

      private function clearFields():void
      {
        if (usernameField) usernameField.text = "";
        if (passwordField) passwordField.text = "";
      }

      private function getLoginStatusResourceName(loginStatus:String):String
      {
        switch (loginStatus)
        {
          case ProviderLoginStatus.LOGIN_SUCCESS:
            return "LOGIN_SUCCEED";
          break;

          case ProviderLoginStatus.LOGIN_FAILED:
            return "LOGIN_FAILED";
          break;

          case ProviderLoginStatus.LOGIN_FAILED:
            return "LOGIN_URL_NOT_FOUND_ERROR";
          break;

          default:
            return null;
          break;
        }
      }

      private function preinitializeHandler():void
      {
        ChangeWatcher.watch(_model, ["providerLoginStatus", "loginStatus"],
          function(propertyChangeEvent:PropertyChangeEvent):void
          {
            if (propertyChangeEvent.newValue == ProviderLoginStatus.LOGIN_SUCCESS)
            {
              loginSuccessHandler();
            }
            else if (propertyChangeEvent.newValue == ProviderLoginStatus.LOGIN_FAILED)
            {
              if (usernameField) usernameField.setFocus();
            }
          }
        )
      }
    ]]>
  </mx:Script>

  <!-- Binding -->
  <mx:Binding source="_model.mediaProviders.activeMediaProvider" destination="activeMediaProvider" />

  <mx:Resize id="resizeIn" widthFrom="0" heightFrom="0" />
  <mx:Resize id="resizeOut" widthTo="0" heightTo="0" />

  <!-- States -->
  <mx:states>
    <!--user & password-->
    <mx:State name="{AuthentcationMethodTypes.AUTH_METHOD_USER_PASS}">
      <mx:AddChild relativeTo="{form}" position="firstChild">
        <mx:FormItem id="usernameFormItem" addedToStage="callLater(usernameField.setFocus)"
          label="{resourceManager.getString(ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN, 'USERNAME')}">
          <mx:TextInput id="usernameField" />
        </mx:FormItem>
      </mx:AddChild>

      <mx:AddChild relativeTo="{usernameFormItem}" position="after">
        <mx:FormItem id="passwordFormItem"
          label="{resourceManager.getString(ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN, 'PASSWORD')}">
          <mx:TextInput id="passwordField" displayAsPassword="true" enter="doLogin()" />
        </mx:FormItem>
      </mx:AddChild>

      <mx:AddChild relativeTo="{passwordFormItem}" position="after">
        <mx:FormItem horizontalAlign="center">
          <mx:Button
            click="doLogin()" buttonMode="true"
            label="{resourceManager.getString(ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN, 'LOGIN')}"
            styleName="greenButton"
            enabled="{!_model.providerLoginStatus.isPending}" />
        </mx:FormItem>
      </mx:AddChild>
    </mx:State>

    <!--username only-->
    <mx:State name="{AuthentcationMethodTypes.AUTH_METHOD_USER}" basedOn="{AuthentcationMethodTypes.AUTH_METHOD_USER_PASS}">
      <mx:SetEventHandler target="{usernameField}" name="enter" handler="doLogin()" />
      <mx:RemoveChild target="{passwordFormItem}" />
    </mx:State>

    <!--external login-->
    <mx:State name="{AuthentcationMethodTypes.AUTH_METHOD_EXTERNAL}" enterState="externalEnterStateHandler()">
      <!--<mx:SetProperty name="loginMode" value="{externalLogin}" />-->

      <mx:AddChild relativeTo="{this}" position="firstChild" creationPolicy="all">
        <mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
          <mx:LinkButton
            styleName="link"
            label="{resourceManager.getString
                            (
                              ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN,
                              'EXTERNAL_LINK',
                              [resourceManager.getString(ResourceBundleNames.MEDIA_PROVIDERS, _model.mediaProviders.activeMediaProvider.providerName.toUpperCase() + '_LEAD')]
                            )
                }"
            click="gotoExternalLogin()"
            enabled="{activeMediaProvider.authMethodList.privateMethod.externalAuthUrl != null}" />
          <!--<mx:Spacer height="20" /> -->
          <mx:Button id="externalLoginDoneButton"
            click="doLogin()"
            styleName="greenButton"
            label="{resourceManager.getString(ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN, 'EXTERNAL_LOGIN_DONE_BUTTON')}"  buttonMode="true"
            visible="{_isDoingLogin}"/>
        </mx:VBox>
      </mx:AddChild>
    </mx:State>

  </mx:states>

  <!-- Visible content -->

  <mx:Form width="100%" height="100%" id="form">
    <mx:FormItem id="statusFormItem" visible="{statusText.text != ''}" includeInLayout="{statusText.text != ''}">
      <mx:Label id="statusText"
        text="{
            resourceManager.getString
                        (
                          ResourceBundleNames.SEARCH_AUTHENTICATION_SCREEN,
                          getLoginStatusResourceName(_model.providerLoginStatus.loginStatus)
                        )
            }"/>
    </mx:FormItem>
  </mx:Form>
</mx:TitleWindow>